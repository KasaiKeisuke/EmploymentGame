//*******************************************************************************************************************************************
//
// ダイナマイトアリーナ(light.cpp)
// Author : Kasai Keisuke
//
//*******************************************************************************************************************************************

// include
#include "light.h"
#include "manager.h"

//*******************************************************************************************************************************************
// コンストラクタ
//*******************************************************************************************************************************************
CLight::CLight()
{
	for (int nCntLight = 0; nCntLight < MAX_LIGHT; nCntLight++)
	{
		// ライトの情報をクリアする
		ZeroMemory(&m_aLight[nCntLight], sizeof(D3DLIGHT9));
	}

	m_pDevice = nullptr;	// デバイスのポインタ
	m_pCamera = nullptr;	// カメラのポインタ
}

//*******************************************************************************************************************************************
// デストラクタ
//*******************************************************************************************************************************************
CLight::~CLight()
{
	m_pDevice = nullptr;	// デバイスのポインタ
	m_pCamera = nullptr;	// カメラのポインタ
}

//*******************************************************************************************************************************************
// 初期化処理
//*******************************************************************************************************************************************
HRESULT CLight::Init()
{
	// シングルトンインスタンスの取得
	CManager& manager = CManager::GetInstance();

	m_pDevice = manager.GetRenderer()->GetDevice();

	m_pCamera = manager.GetCamera();

	D3DXVECTOR3 vecDir;	// 方向ベクトル

	for (int nCntLight = 0; nCntLight < MAX_LIGHT; nCntLight++)
	{
		// ライトの種類を設定
		m_aLight[nCntLight].Type = D3DLIGHT_DIRECTIONAL;

		// ライトの向きと明るさの設定
		switch (nCntLight)
		{
		case 0:
			vecDir = D3DXVECTOR3(1.0f, -1.0f, 1.0f);

			m_aLight[nCntLight].Diffuse = D3DXCOLOR(0.8f, 0.8f, 0.8f, 1.0f);

			break;
		case 1:
			vecDir = D3DXVECTOR3(-1.0f, -1.0f, -1.0f);

			m_aLight[nCntLight].Diffuse = D3DXCOLOR(0.6f, 0.6f, 0.6f, 1.0f);

			break;
		case 2:
			vecDir = D3DXVECTOR3(1.0f, -1.0f, -1.0f);

			m_aLight[nCntLight].Diffuse = D3DXCOLOR(0.4f, 0.4f, 0.4f, 1.0f);

			break;
		case 3:
			vecDir = D3DXVECTOR3(-1.0f, -1.0f, 1.0f);

			m_aLight[nCntLight].Diffuse = D3DXCOLOR(0.5f, 0.5f, 0.5f, 1.0f);

			break;
		}

		// ベクトルの正規化
		D3DXVec3Normalize(&vecDir, &vecDir);
		m_aLight[nCntLight].Direction = vecDir;

		// ライトを設定する
		m_pDevice->SetLight(nCntLight, &m_aLight[nCntLight]);

		// ライトを有効にする
		m_pDevice->LightEnable(nCntLight, TRUE);

	}
	return S_OK;
}

//*******************************************************************************************************************************************
// 終了処理
//*******************************************************************************************************************************************
void CLight::Uninit()
{

}

//*******************************************************************************************************************************************
// 更新処理
//*******************************************************************************************************************************************
void CLight::Update()
{

}
