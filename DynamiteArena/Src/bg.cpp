//*******************************************************************************************************************************************
//
// ダイナマイトアリーナ(bg.cpp)
// Author : Kasai Keisuke
//
//*******************************************************************************************************************************************

// include
#include "bg.h"
#include "manager.h"

// 静的メンバ変数初期化
LPDIRECT3DTEXTURE9 CBg::m_pTexture = nullptr;	// テクスチャ

//*******************************************************************************************************************************************
// コンストラクタ
//*******************************************************************************************************************************************
CBg::CBg(int nPriority):CObject2D(nPriority)
{
	m_pTexture = nullptr;	// テクスチャ
}

//*******************************************************************************************************************************************
// デストラクタ
//*******************************************************************************************************************************************
CBg::~CBg()
{

}

//*******************************************************************************************************************************************
// 初期化処理
//*******************************************************************************************************************************************
HRESULT CBg::Init()
{
	// 2Dオブジェクトの初期化処理
	CObject2D::Init();

	return S_OK;
}

//*******************************************************************************************************************************************
// 終了処理
//*******************************************************************************************************************************************
void CBg::Uninit()
{
	// 2Dオブジェクトの終了処理
	CObject2D::Uninit();

	// 背景の破棄
	Release();
}

//*******************************************************************************************************************************************
// 更新処理
//*******************************************************************************************************************************************
void CBg::Update()
{
	// 2Dオブジェクトの更新処理
	CObject2D::Update();
}

//*******************************************************************************************************************************************
// 更新処理
//*******************************************************************************************************************************************
void CBg::Draw()
{
	// 2Dオブジェクトの描画処理
	CObject2D::Draw();
}

//*******************************************************************************************************************************************
// 更新処理
//*******************************************************************************************************************************************
CBg* CBg::Create(D3DXVECTOR3 pos, float fWidth, float fHeight, TEXTYPE type)
{
	CBg* pBg = new CBg();

	if (pBg != nullptr)
	{
		pBg->Init();

		// シングルトンインスタンスの取得
		CManager& manager = CManager::GetInstance();

		switch (type)
		{
		case TYPE_TITLE:
			// テクスチャの読み込み
			D3DXCreateTextureFromFile(manager.GetRenderer()->GetDevice(), "data\\TEXTURE\\title000.png", &pBg->m_pTexture);
			
			break;
		case TYPE_TUTORIAL:
			// テクスチャの読み込み
			D3DXCreateTextureFromFile(manager.GetRenderer()->GetDevice(), "data\\TEXTURE\\tutorial000.png", &pBg->m_pTexture);

			break;

		case TYPE_GAME:
			break;
		case TYPE_CLEARRESULT:
			// テクスチャの読み込み
			D3DXCreateTextureFromFile(manager.GetRenderer()->GetDevice(), "data\\TEXTURE\\result000.png", &pBg->m_pTexture);

			break;
		case TYPE_FAILRESULT:
			// テクスチャの読み込み
			D3DXCreateTextureFromFile(manager.GetRenderer()->GetDevice(), "data\\TEXTURE\\result001.png", &pBg->m_pTexture);

			break;
		}

		pBg->SetObject2D(pos, D3DXCOLOR(1.0f,1.0f,1.0f,1.0f),fWidth, fHeight);

		pBg->BindTexture(m_pTexture);
	
		return pBg;
	}
	return nullptr;
}
