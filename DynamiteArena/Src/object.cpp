//*******************************************************************************************************************************************
//
// ダイナマイトアリーナ(object.cpp)
// Author : Kasai Keisuke
//
//*******************************************************************************************************************************************

// include
#include "object.h"

// 静的メンバ変数初期化
int CObject::m_nNumAll = 0;										// オブジェクトの総数
CObject* CObject::m_apObject[DRAW_PRIORITY][MAX_OBJECT] = {};	// オブジェクトのポインタ

//*******************************************************************************************************************************************
// コンストラクタ
//*******************************************************************************************************************************************
CObject::CObject(int nPriority)
{
	m_nPriority = nPriority;	// 描画優先度の設定

	for (int nCnt = 0; nCnt < MAX_OBJECT; nCnt++)
	{
		if (m_apObject[m_nPriority][nCnt] == nullptr)
		{
			m_apObject[m_nPriority][nCnt] = this;	// 自分自身の代入
			m_nID = nCnt;							// 自分自身のIDを代入
			m_nNumAll++;							// 総数のカウントアップ
			break;
		}
	}

	m_Type = TYPE_NONE;
}

//*******************************************************************************************************************************************
// デストラクタ
//*******************************************************************************************************************************************
CObject::~CObject()
{
	m_Type = TYPE_NONE;
}

//*******************************************************************************************************************************************
// 全オブジェクト破棄処理
//*******************************************************************************************************************************************
void CObject::ReleaseAll()
{
	for (int nCntPriority = 0; nCntPriority < DRAW_PRIORITY; nCntPriority++)
	{
		for (int nCntObj = 0; nCntObj < MAX_OBJECT; nCntObj++)
		{
			if (m_apObject[nCntPriority][nCntObj] != nullptr)
			{
				m_apObject[nCntPriority][nCntObj]->Uninit();
			}
		}
	}
}

//*******************************************************************************************************************************************
// 全オブジェクト更新処理
//*******************************************************************************************************************************************
void CObject::UpdateAll()
{
	for (int nCntPriority = 0; nCntPriority < DRAW_PRIORITY; nCntPriority++)
	{
		for (int nCntObj = 0; nCntObj < MAX_OBJECT; nCntObj++)
		{
			if (m_apObject[nCntPriority][nCntObj] != nullptr)
			{
				m_apObject[nCntPriority][nCntObj]->Update();
			}
		}
	}
}

//*******************************************************************************************************************************************
// 全オブジェクト描画処理
//*******************************************************************************************************************************************
void CObject::DrawAll()
{
	for (int nCntPriority = 0; nCntPriority < DRAW_PRIORITY; nCntPriority++)
	{
		for (int nCntObj = 0; nCntObj < MAX_OBJECT; nCntObj++)
		{
			if (m_apObject[nCntPriority][nCntObj] != nullptr)
			{
				m_apObject[nCntPriority][nCntObj]->Draw();
			}
		}
	}
}

//*******************************************************************************************************************************************
// オブジェクトの情報取得処理
//*******************************************************************************************************************************************
CObject* CObject::GetObjectInfo(int nPriority, int nIdx)
{
	return m_apObject[nPriority][nIdx];
}

//*******************************************************************************************************************************************
// オブジェクトの種類設定処理
//*******************************************************************************************************************************************
void CObject::SetType(OBJECTTYPE type)
{
	m_Type = type;
}

//*******************************************************************************************************************************************
// オブジェクトの種類取得処理
//*******************************************************************************************************************************************
CObject::OBJECTTYPE CObject::GetType()
{
	return m_Type;
}

//*******************************************************************************************************************************************
// オブジェクトの破棄
//*******************************************************************************************************************************************
void CObject::Release()
{
	int nID = m_nID;				// IDの保存
	int nPriority = m_nPriority;	// プライオリティの保存

	if (m_apObject[nPriority][nID] != nullptr)
	{
		delete m_apObject[nPriority][nID];	// メモリの解放
		m_apObject[nPriority][nID] = nullptr;
		m_nNumAll--;						// 総数を減らす
	}
}
