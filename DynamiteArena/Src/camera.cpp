//*******************************************************************************************************************************************
//
// ダイナマイトアリーナ(camera.cpp)
// Author : Kasai Keisuke
//
//*******************************************************************************************************************************************

// include
#include "camera.h"
#include "manager.h"
#include "player.h"
#include <random>


//*******************************************************************************************************************************************
// コンストラクタ
//*******************************************************************************************************************************************
CCamera::CCamera()
{
	// メンバ変数の初期化
	m_PosV = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_PosR = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_VecU = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_Rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	m_nCnt = 0;				// 揺らす時間
	m_fShake = 0.0f;		// 揺らす量

	m_mtxProjection = {};
	m_MtxView = {};

	m_pDevice = nullptr;

	m_InputJoypad = nullptr;		// ジョイパッドのポインタ
	m_InputKeyboard = nullptr;		// キーボードのポインタ
}

//*******************************************************************************************************************************************
// デストラクタ
//*******************************************************************************************************************************************
CCamera::~CCamera()
{
	// メンバ変数の初期化
	m_PosV = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_PosR = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_VecU = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_Rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	m_nCnt = 0;				// 揺らす時間
	m_fShake = 0.0f;		// 揺らす量

	m_mtxProjection = {};
	m_MtxView = {};

	m_pDevice = nullptr;

	m_InputJoypad = nullptr;		// ジョイパッドのポインタ
	m_InputKeyboard = nullptr;		// キーボードのポインタ

}

//*******************************************************************************************************************************************
// 初期化処理
//*******************************************************************************************************************************************
HRESULT CCamera::Init()
{
	// カメラの初期位置の設定
	//m_PosV = D3DXVECTOR3(0.0f, 600.0f, 0.0f);        // バードビュー2
	m_PosV = D3DXVECTOR3(0.0f, 100.0f, -400.0f);        // バードビュー2
	m_PosR = D3DXVECTOR3(0.0f, 0.0f, 100.0f);
	m_VecU = D3DXVECTOR3(0.0f, 1.0f, 0.0f);		// 上方向ベクトル
	m_Rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	m_mtxProjection = {};
	m_MtxView = {};

	// シングルトンインスタンスの取得
	CManager& manager = CManager::GetInstance();

	m_pDevice = manager.GetRenderer()->GetDevice();
	
	m_InputKeyboard = manager.GetKeyboard();

	m_InputJoypad = manager.GetJoypad();

	return S_OK;
}

//*******************************************************************************************************************************************
// 終了処理
//*******************************************************************************************************************************************
void CCamera::Uninit()
{
	// カメラの初期位置の設定
	//m_PosV = D3DXVECTOR3(0.0f, 600.0f, 0.0f);        // バードビュー2
	m_PosV = D3DXVECTOR3(0.0f, 100.0f, -400.0f);        // バードビュー2
	m_PosR = D3DXVECTOR3(0.0f, 0.0f, 100.0f);
	m_VecU = D3DXVECTOR3(0.0f, 1.0f, 0.0f);		// 上方向ベクトル
	m_Rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	m_mtxProjection = {};
	m_MtxView = {};

}

//*******************************************************************************************************************************************
// 更新処理
//*******************************************************************************************************************************************
void CCamera::Update()
{

}

//*******************************************************************************************************************************************
// カメラ設定処理
//*******************************************************************************************************************************************
void CCamera::SetCamera()
{
	// プロジェクションマトリックスの初期化
	D3DXMatrixIdentity(&m_mtxProjection);

	// プロジェクションマトリックスを作成
	D3DXMatrixPerspectiveFovLH(&m_mtxProjection,
		D3DXToRadian(45.0f),
		(float)SCREEN_WIDTH / (float)SCREEN_HEIGHT,
		0.1f,
		1000.0f);

	// プロジェクションマトリックスの設定
	m_pDevice->SetTransform(D3DTS_PROJECTION, &m_mtxProjection);

	// ビューマトリックスの初期化
	D3DXMatrixIdentity(&m_MtxView);

	// ビューマトリックスの作成
	D3DXMatrixLookAtLH(&m_MtxView, &m_PosV, &m_PosR, &m_VecU);

	// ビューマトリックスの設定
	m_pDevice->SetTransform(D3DTS_VIEW, &m_MtxView);
}

//*******************************************************************************************************************************************
// カメラ追従処理
//*******************************************************************************************************************************************
void CCamera::FollowCamera(D3DXVECTOR3 pos)
{	
	//D3DXVECTOR3 CurrentPosV = GetPosV();
	//D3DXVECTOR3 CurrentPosR = GetPosR();

	////**********************************************
	//// FPS視点
	////**********************************************
	//// 右スティックの入力量の取得
	//m_Rot.y += m_InputJoypad->GetRightThumbX() * 0.01f;

	//// カメラの視点を設定
	//CurrentPosV = D3DXVECTOR3(pos.x, pos.y + CAMERA_HEIGHT, pos.z);	// 頭の位置ぐらい

	//// 注視点をカメラの少し奥の位置に設定
	//CurrentPosR.x = CurrentPosV.x + sinf(D3DX_PI * m_Rot.y) * CameraLength;
	//CurrentPosR.y = CurrentPosV.y;
	//CurrentPosR.z = CurrentPosV.z + cosf(D3DX_PI * m_Rot.y) * CameraLength;

	//SetPosV(CurrentPosV);
	//SetPosR(CurrentPosR);

	//SetRot(m_Rot);

	D3DXVECTOR3 CurrentPosV = GetPosV();
	D3DXVECTOR3 CurrentPosR = GetPosR();

	// 右スティックの入力を利用してカメラの回転角度を更新
	m_Rot.y += m_InputJoypad->GetRightThumbX() * 0.03f;

	// カメラをプレイヤーの背後かつ上方に配置
	float distanceFromPlayer = CameraLength;	// プレイヤーからカメラまでの距離
	float heightAbovePlayer = CAMERA_HEIGHT;    // プレイヤーの頭上の高さ

	CurrentPosV.x = pos.x - sinf(m_Rot.y) * distanceFromPlayer;  // プレイヤーの背後に配置
	CurrentPosV.y = pos.y + heightAbovePlayer;                  // 頭上に配置
	CurrentPosV.z = pos.z - cosf(m_Rot.y) * distanceFromPlayer; // プレイヤーから離れた位置に配置

	// 注視点をプレイヤーの位置に設定
	CurrentPosR = pos;

	// カメラの位置と注視点をセット
	SetPosV(CurrentPosV);
	SetPosR(CurrentPosR);
}


//*******************************************************************************************************************************************
// カメラの向き設定処理
//*******************************************************************************************************************************************
void CCamera::SetRot(D3DXVECTOR3 rot)
{
	m_Rot = rot;
}

//*******************************************************************************************************************************************
// カメラの向き取得処理
//*******************************************************************************************************************************************
D3DXVECTOR3 CCamera::GetRot()
{
	return m_Rot;
}

//*******************************************************************************************************************************************
// カメラの視点設定処理
//*******************************************************************************************************************************************
void CCamera::SetPosV(D3DXVECTOR3 rot)
{
	m_PosV = rot;
}

//*******************************************************************************************************************************************
// カメラの視点取得処理
//*******************************************************************************************************************************************
D3DXVECTOR3 CCamera::GetPosV()
{
	return m_PosV;
}

//*******************************************************************************************************************************************
// カメラの注視点設定処理
//*******************************************************************************************************************************************
void CCamera::SetPosR(D3DXVECTOR3 rot)
{
	m_PosR = rot;
}

//*******************************************************************************************************************************************
// カメラの注視点取得処理
//*******************************************************************************************************************************************
D3DXVECTOR3 CCamera::GetPosR()
{
	return m_PosR;
}

//*******************************************************************************************************************************************
// カメラの揺らす処理
//*******************************************************************************************************************************************
void CCamera::SetShake(int nCnt, float fShake)
{
	D3DXVECTOR3 CurrentPosV = GetPosV();
	D3DXVECTOR3 CurrentPosR = GetPosR();

	m_nCnt = nCnt;
	m_fShake = fShake;

	D3DXVECTOR3 Adjust = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	if (m_nCnt > 0)
	{
		// 1.0〜m_fShakeの中で乱数値を生成し代入
		float randomFactor = 1.0f + static_cast<float>(rand()) / (static_cast<float>(RAND_MAX / (m_fShake - 1.0f)));

		Adjust.x = randomFactor;
		Adjust.y = randomFactor;
		Adjust.z = randomFactor;

		m_nCnt--;
	}

	D3DXVECTOR3 AdjustPosV = CurrentPosV + Adjust;	// 最終的な視点の移動量を保存

	D3DXVECTOR3 AdjustPosR = CurrentPosR + Adjust;	// 最終的な注視点の移動量を保存

	D3DXMatrixLookAtLH(&m_MtxView, &AdjustPosV, &AdjustPosR, &m_VecU);

	SetPosV(AdjustPosV);

	SetPosR(AdjustPosR);
}


