//*******************************************************************************************************************************************
//
// ダイナマイトアリーナ(goal.cpp)
// Author : Kasai Keisuke
//
//*******************************************************************************************************************************************

// include
#include "goal.h"
#include "manager.h"

//*******************************************************************************************************************************************
// コンストラクタ
//*******************************************************************************************************************************************
CGoal::CGoal(int nPriority):CObjectX(nPriority)
{

}

//*******************************************************************************************************************************************
// デストラクタ
//*******************************************************************************************************************************************
CGoal::~CGoal()
{

}

//*******************************************************************************************************************************************
// 初期化処理
//*******************************************************************************************************************************************
HRESULT CGoal::Init()
{
	// Xファイルオブジェクトの初期化処理
	CObjectX::Init();

	return S_OK;
}

//*******************************************************************************************************************************************
// 終了処理
//*******************************************************************************************************************************************
void CGoal::Uninit()
{
	// Xファイルオブジェクトの終了処理
	CObjectX::Uninit();

	// ゴールマーカーの破棄
	Release();
}

//*******************************************************************************************************************************************
// 更新処理
//*******************************************************************************************************************************************
void CGoal::Update()
{
	// Xファイルオブジェクトの更新処理
	CObjectX::Update();
}

//*******************************************************************************************************************************************
// 描画処理
//*******************************************************************************************************************************************
void CGoal::Draw()
{
	// Xファイルオブジェクトの描画処理
	CObjectX::Draw();
}

//*******************************************************************************************************************************************
// 生成処理
//*******************************************************************************************************************************************
CGoal* CGoal::Create(D3DXVECTOR3 pos)
{
	CGoal* pGoal = new CGoal();

	pGoal->Init();											// 初期化処理

	pGoal->SetPos(pos);										// 位置設定処理

	pGoal->SetRot(D3DXVECTOR3(0.0f, 0.0f, 0.0f));			// 向き設定

	pGoal->BindFileName("data\\MODEL\\GOAL\\exit000.x");	// 読み込むモデル設定

	pGoal->SetModelSize();									// モデルの頂点情報設定

	pGoal->SetType(CObject::OBJECTTYPE::TYPE_GOAL);			// 種類設定

	return nullptr;
}

//*******************************************************************************************************************************************
// 当たり判定
//*******************************************************************************************************************************************
bool CGoal::CollisionGoal(D3DXVECTOR3* pos, D3DXVECTOR3* posOld, D3DXVECTOR3 size, int nType)
{
	// シングルトンインスタンスの取得
	CManager& manager = CManager::GetInstance();

	bool bHit = false;	// 当たったかどうか

	D3DXVECTOR3 CurrentPos = GetPos();
	D3DXVECTOR3 CurrentMinVtx = GetMinVtx();
	D3DXVECTOR3 CurrentMaxVtx = GetMaxVtx();
	switch (nType)
	{
	case CObject::OBJECTTYPE::TYPE_PLAYER:	// プレイヤーとゴールマーカーの当たり判定
		if (pos->z + size.z / 2 > CurrentPos.z + CurrentMinVtx.z &&
			pos->z - size.z / 2 < CurrentPos.z + CurrentMaxVtx.z &&
			posOld->x + size.x / 2 <= CurrentPos.x + CurrentMinVtx.x &&
			pos->x + size.x / 2 > CurrentPos.x + CurrentMinVtx.x)
		{// プレイヤーがゴールマーカーに対して左側からあたったとき
			bHit = true;
		}

		if (pos->z - size.z / 2 < CurrentPos.z + CurrentMaxVtx.z &&
			pos->z + size.z / 2 > CurrentPos.z + CurrentMinVtx.z &&
			posOld->x - size.x / 2 >= CurrentPos.x + CurrentMaxVtx.x &&
			pos->x - size.x / 2 < CurrentPos.x + CurrentMaxVtx.x)
		{// プレイヤーがゴールマーカーに対して右側からあたったとき
			bHit = true;
		}

		if (pos->x - size.x / 2 < CurrentPos.x + CurrentMaxVtx.x &&
			pos->x + size.x / 2 > CurrentPos.x + CurrentMinVtx.x &&
			posOld->z - size.z / 2 >= CurrentPos.z + CurrentMaxVtx.z &&
			pos->z - size.z / 2 < CurrentPos.z + CurrentMaxVtx.z)
		{// プレイヤーがゴールマーカーに対して奥側からあたったとき
			bHit = true;
		}

		if (pos->x - size.x / 2 < CurrentPos.x + CurrentMaxVtx.x &&
			pos->x + size.x / 2 > CurrentPos.x + CurrentMinVtx.x &&
			posOld->z + size.z / 2 <= CurrentPos.z + CurrentMinVtx.z &&
			pos->z + size.z / 2 > CurrentPos.z + CurrentMinVtx.z)
		{// プレイヤーがゴールマーカーに対して手前側からあたったとき
			bHit = true;
		}

		break;
	}

	//if (bHit)
	//{
	//	manager.SetGoal(bHit);
	//}

	return bHit;
}
