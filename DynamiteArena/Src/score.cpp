//*******************************************************************************************************************************************
//
// ダイナマイトアリーナ(score.cpp)
// Author : Kasai Keisuke
//
//*******************************************************************************************************************************************

// include 
#include "score.h"
#include "manager.h"

//*******************************************************************************************************************************************
// 静的メンバ変数初期化
//*******************************************************************************************************************************************
CNumber* CScore::m_aNumber[MAX_DIGIT] = {};
int CScore::m_nScore = 0;

//*******************************************************************************************************************************************
// コンストラクタ
//*******************************************************************************************************************************************
CScore::CScore(int nPriority)
{
	m_pGameManager = nullptr;
}

//*******************************************************************************************************************************************
// デストラクタ
//*******************************************************************************************************************************************
CScore::~CScore()
{
	m_pGameManager = nullptr;
}

//*******************************************************************************************************************************************
// 初期化処理
//*******************************************************************************************************************************************
HRESULT CScore::Init()
{
	// シングルトンインスタンスの取得
	CManager& manager = CManager::GetInstance();
	m_pGameManager = manager.GetGameManager();

	if (m_pGameManager != nullptr)
	{
		m_nScore = m_pGameManager->GetScore();
	}

	// 桁数分数字の生成
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		m_aNumber[nCnt] = CNumber::Create(D3DXVECTOR3((SCREEN_WIDTH - 30.0f) - (40.0f * nCnt), 50.0f, 0.0f));
	}

	return S_OK;
}

//*******************************************************************************************************************************************
// 終了処理
//*******************************************************************************************************************************************
void CScore::Uninit()
{
	// スコアの桁数分の数字の終了処理
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		m_aNumber[nCnt]->Uninit();
	}

	// スコアの破棄
	Release();

}

//*******************************************************************************************************************************************
// 更新処理
//*******************************************************************************************************************************************
void CScore::Update()
{
	// シングルトンインスタンスの取得
	CManager& manager = CManager::GetInstance();

	int aScore[MAX_DIGIT];	// 各桁の数字保存用

	int nScore = m_pGameManager->GetScore();	// スコアの取得

	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		// 桁数の分解
		aScore[nCnt] = nScore % 10;
		nScore /= 10;
	}

	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		m_aNumber[nCnt]->SetVtxAnimPolygon(10.0f, 1.0f, (float)aScore[nCnt]);

		m_aNumber[nCnt]->Update();

	}

}

//*******************************************************************************************************************************************
// 描画処理
//*******************************************************************************************************************************************
void CScore::Draw()
{
	for (int nCnt = 0; nCnt < MAX_DIGIT; nCnt++)
	{
		m_aNumber[nCnt]->Draw();
	}
}

//*******************************************************************************************************************************************
// 生成処理
//*******************************************************************************************************************************************
CScore* CScore::Create()
{
	CScore* pScore = new CScore();

	pScore->Init();

	return pScore;
}

//*******************************************************************************************************************************************
// スコア加算処理
//*******************************************************************************************************************************************
void CScore::Add(int nScore)
{
	m_nScore += nScore;

	// シングルトンインスタンスの取得
	CManager& manager = CManager::GetInstance();

	manager.GetGameManager()->SetScore(m_nScore);
}
